<%- include('../blocks/header') %>
<div id="wrapper">
  <!-- Sidebar -->
  <%- include('../blocks/sidebar', { size: files.size, formatBytes }) %>
  <div class="container-fluid" style="padding:0px 30px 0px;">
    &nbsp;
    <%- include('../partials/message', { error })%>
    <div class="row">
      <div class="col-sm-10">
        <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/files">Home</a></li>
            <% for (var name of path.split('/').slice(2, path.length)) { %>
              <li class="breadcrumb-item active">
                <a href=<%= `/${path.split('/').slice(1, path.split('/').indexOf(name)+1).join('/')}` %>><%= name%></a>
              </li>
            <% } %>
          </ol>
        </nav>
      </div>
      <div class="col-sm-2">
        <div class="btn-group" style="float:right">
          <button type="button" class="btn btn-secondary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Upload</button>
          <div class="dropdown-menu dropdown-menu-right">
            <form action="/files/upload" method="post" encType="multipart/form-data" ref='uploadForm' id='uploadForm' >
              <label class="dropdown-item" type="button" id="fileHover">
                Files<input type="file" hidden name="sampleFile" onChange="javascript:document.getElementById('imagefile').click();" />
              </label>
              <input type="hidden" value="<%= path%>" name="path">
              <label class="dropdown-item" type="button" id="fileHover">
                Folders<input type="file" hidden name="sampleFile" webkitdirectory mozdirectory onChange="javascript:document.getElementById('imagefile').click();" />
              </label>
              <button type="submit" style="display:none;" id="imagefile"></button>
            </form>
          </div>
        </div>
      </div>
    </div>
    &nbsp
    <table class="table" id="myTable">
      <thead>
        <tr onClick="updateAll();">
          <th scope="col" style="width:5%">
            <a type="button" class="hide" data-toggle="tooltip" data-placement="top" title="Toggle selection for all items">
              <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" name="exampleRadios" id="All" value="option2">
              </div>
            </a>
          </th>
          <th id="Name" scope="col">Name</th>
          <th id="Size" scope="col">Size</th>
          <th id="Date modified" scope="col">Date modified</th>
        </tr>
      </thead>
      <tbody>
        <!--Show folders first-->
        <% for (const file of files.children.filter(file => file.type == 'directory')) { %>
          <tr>
            <th>
              <div class="form-check form-check-inline hide">
                <input class="form-check-input" type="checkbox" name="exampleRadios" id="exampleRadios2" value="option2">
              </div>
            </th>
            <th scope="row" class="text-truncate" style="min-width: 150px;">
              <a href="<%= decodeURI(`${path == '/' ? '/files' : path}/${file.name}`) %>"><%= file.name %></a>
              <!-- Default dropright button -->
              <div class="btn-group dropright">
                <button type="button" class="btn btn-secondary">
                  Split dropright
                </button>
                <button type="button" class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-boundary="scrollParent">
                  <span class="sr-only">Toggle Dropright</span>
                </button>
                <div class="dropdown-menu">
                  <p>Test</p>
                  <p>Test</p>
                  <p>Test</p>
                  <p>Test</p>
                </div>
              </div>
            </th>
            <td><%= file.children?.length ?? 0 %> files</td>
            <td><%= file.modified?.toDateString() %></td>
          </tr>
        <% } %>
        <% for (const file of files.children.filter(file => file.type == 'file')) { %>
          <tr onClick="updateValue('<%= encodeURI(file.name) %>');">
            <th>
              <div class="form-check form-check-inline hide">
                <input onclick="updateValue('<%= encodeURI(file.name) %>');" class="form-check-input" type="checkbox" name="exampleRadios" id="<%= encodeURI(file.name) %>" value="option2">
              </div>
            </th>
            <th scope="row" class="text-truncate" style="max-width: 150px;"> <a href="<%= decodeURI(`${path == '/' ? '/files' : path}/${file.name}`) %>"><%= file.name %></a></th>
            <td><%= formatBytes(file.size) %></td>
            <td><%= file.modified?.toDateString() %></td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>
</div>
<script>
  $(function () {
    $('[data-toggle="tooltip"]').tooltip()
  })

  $("tr").bind('mouseover', function() {
    onHover($(this)[0])

    $("tr").bind('mouseout', function () {
      offHover($(this)[0])
    });
  });

  function onHover(item, parent) {
    //item.classList.remove("hide");
    if (parent) {
      item.parentElement.classList.remove("hide");
      item.parentElement.parentElement.parentElement.style.background = "#edebe9"
    } else {
      item.style.background = "#edebe9"
    }
  }

  function offHover(item, parent) {
    if (parent) {
      item.parentElement.classList.add("hide");
      item.parentElement.parentElement.parentElement.style.background = "white"
    } else {
      item.style.background = "white"

    }
  }

  function updateAll() {
    if (document.getElementById('All').checked) {
      var checkboxes = document.querySelectorAll("input[type=checkbox]")
      console.log(checkboxes)
      checkboxes.forEach((checkbox) => {
        updateValue(checkbox.id)
      });
    } else {
      var checkboxes = document.querySelectorAll("input[type=checkbox]")
      console.log(checkboxes)
      checkboxes.forEach((checkbox) => {
        checkbox.checked = false
      });
    }
  }
  function updateValue(id) {
    if (document.getElementById(id).checked) {
      offHover(document.getElementById(id), true)
      //document.getElementById(id).parentElement.classList.add("hide");
      //console.log(document.getElementById(id).parentElement.parentElement.parentElement)
      //document.getElementById(id).parentElement.parentElement.parentElement.style.background = "white"
    } else {
      onHover(document.getElementById(id), true)
      //document.getElementById(id).parentElement.classList.remove("hide");
      //document.getElementById(id).parentElement.parentElement.parentElement.style.background = "#edebe9"
    }
    document.getElementById(id).checked = !document.getElementById(id).checked
  }

  $(document).ready(function($) {
    $(".clickable-row").click(function() {
        window.location = $(this).data("href");
    });

    //Custom context menu
    oncontextmenu = (e) => {
      if (e.target.parentElement != null && e.target.parentElement.childNodes[3]?.className == 'text-truncate') {
        const file = e.target.parentElement.childNodes[3].outerText
        e.preventDefault()
        let menu = document.createElement("div")
        menu.id = "ctxmenu"
        menu.style = `top:${e.pageY}px;left:${e.pageX}px`
        menu.onmouseleave = () => ctxmenu.outerHTML = ''
        menu.innerHTML = `<%- include('../partials/context-menu')%>`
        document.body.appendChild(menu)
      }
    }
  });

  //Sorts table
  const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;
  const comparer = (idx, asc) => (a, b) => ((v1, v2) =>
    v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
  )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

  // Activate everytime table header is clicked
  document.querySelectorAll('th')
    .forEach(th => {
      if (th.className == 'text-truncate') return
      return th.addEventListener('click', (() => {
        const table = th.closest('table');
        const element = document.getElementById(th.id);
        if (!element) return
        element.innerHTML = element.id + ((!this.asc) ? " <i class=\"fas fa-sort-up\"></i>" : " <i class=\"fas fa-sort-down\"></i>")
        Array.from(table.childNodes[3].querySelectorAll('tr:nth-child(n+1)'))
          .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.asc = !this.asc))
          .forEach(tr => table.childNodes[3].appendChild(tr));
        }))
      });
</script>
<style>
  img {
    height: 340px;
  }
  a {
    color: #717171
  }
  input[type="checkbox"]:hover  {
    background-color: blue;
  }
  a:hover {
    color: #3B3B3B
  }
  #load-now {
    border: 5px solid black;
  }
  #fileHover:hover {
    cursor: pointer
  }
  body {
   overflow-x: hidden;
  }
  .hide {
    display: none;
  }

  tr:hover > th >  .hide {
    display: block;
    color: red;
  }

/* Toggle Styles */

#wrapper {
  padding-left: 0;
}
#ctxmenu {
  position: fixed;
  background: ghostwhite;
  color: black;
  cursor: pointer;
  box-shadow: 0 3px 10px rgb(0 0 0 / 0.2);
}

#ctxmenu > p {
  padding: 0 1rem;
  margin: 0
}

#ctxmenu > p:hover {
  background: black;
  color: ghostwhite
}
#sidebar-wrapper {
  z-index: 1000;
  position: fixed;
  left: 250px;
  width: 0;
  height: 100%;
  margin-left: -250px;
  overflow-y: auto;
  background: #000;
}

#wrapper.toggled #sidebar-wrapper {
  width: 250px;
}

#wrapper.toggled #page-content-wrapper {
  position: absolute;
  margin-right: -250px;
}

@media(min-width:993px) {
   #wrapper {
      padding-left: 250px;
   }
   #wrapper.toggled {
      padding-left: 0;
   }
   #sidebar-wrapper {
      width: 250px;
   }
   #wrapper.toggled #sidebar-wrapper {
      width: 0;
   }
   #wrapper.toggled {
      position: relative;
      margin-right: 0;
   }
}

</style>
